# -*- coding: utf-8 -*-
"""FlaskApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2Roa6N30OoSiyZ_vOpF-m3xQaoHah4r
"""

from flask import Flask, request, jsonify
import joblib
import os
import urllib.request  # For optional remote model loading
import numpy as np
import warnings
from sklearn.exceptions import DataConversionWarning

app = Flask(__name__)

"""load model"""

MODEL_FILENAME = "crop_model.joblib"
MODEL_PATH = os.path.join(os.path.dirname(__file__), MODEL_FILENAME)

# Option 1: Load from local file
if os.path.exists(MODEL_PATH):
    model = joblib.load(MODEL_PATH)
else:
    # Option 2: Download from alternative source
    try:
        MODEL_URL = "https://github.com/Jason1576/soil-analysis-api/raw/refs/heads/main/crop_model.joblib"
        urllib.request.urlretrieve(MODEL_URL, MODEL_PATH)
        model = joblib.load(MODEL_PATH)
    except Exception as e:
        raise RuntimeError(f"Failed to load model: {str(e)}")

SCALER_FILENAME = "scaler.joblib"  # New: Scaler filename
SCALER_PATH = os.path.join(os.path.dirname(__file__), SCALER_FILENAME)

if os.path.exists(SCALER_PATH):
    scaler = joblib.load(SCALER_PATH)
else:
    try:
        SCALER_URL = "https://github.com/Jason1576/soil-analysis-api/raw/main/scaler.joblib"
        urllib.request.urlretrieve(SCALER_URL, SCALER_PATH)
        scaler = joblib.load(SCALER_PATH)
    except Exception as e:
        raise RuntimeError(f"Failed to load scaler: {str(e)}")
        
warnings.filterwarnings("ignore", category=DataConversionWarning)

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.json
        # Extract features in EXACT ORDER used during training
        features = np.array([[
            data["N"],
            data["P"],
            data["K"],
            data["temperature"],
            data["humidity"],
            data["ph"]
        ]])

        # Scale the input
        features_scaled = scaler.transform(features)

        # Predict
        prediction = model.predict(features_scaled)
        return jsonify({"predicted_crop": prediction[0]})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
